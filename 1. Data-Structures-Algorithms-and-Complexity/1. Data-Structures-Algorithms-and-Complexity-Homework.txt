Problem 1.	Add(T) Complexity
Calculate the expected running time O(f(n)) of the Add(T) operation in the above code in the worst case.
SOLUTION: O(n)

    public void Add(T item)
    {
        var newArr = new T[this.arr.Length + 1];     -> O(1)
        Array.Copy(this.arr, newArr, this.arr.Length); -> O(2n)
        newArr[newArr.Length - 1] = item;     -> O(1)
        this.arr = newArr;     -> O(1)
    }


Problem 2.	Remove(index) Complexity – Worst Case
Calculate the expected running time O(f(n)) of the Remove(index) operation in the worst case.
SOLUTION: O(n)

    public T Remove(int index)
    {
        T result = this.arr[index];     -> O(1)
        var newArr = new T[this.arr.Length - 1];     -> O(1)
        Array.Copy(this.arr, newArr, index);     -> O(2n)
        Array.Copy(this.arr, index + 1, newArr, index, this.arr.Length - index - 1);      -> O(1)
        this.arr = newArr;     -> O(1)
        return result;     -> O(1)
    }

	
Problem 3.	Remove(index) Complexity – Best Case
Calculate the expected running time O(f(n)) of the Remove(index) operation in the best case.
SOLUTION: O(n)

    public T Remove(int index)
    {
        T result = this.arr[index];     -> O(1)
        var newArr = new T[this.arr.Length - 1];     -> O(1)
        Array.Copy(this.arr, newArr, index);     -> O(1)
        Array.Copy(this.arr, index + 1, newArr, index, this.arr.Length - index - 1);      -> O(2n)
        this.arr = newArr;     -> O(1)
        return result;     -> O(1)
    }



Problem 4.	Remove(index) Complexity – Average Case
Calculate the expected running time O(f(n)) of the Remove(index) operation in the average case.
SOLUTION: O(n)

    public T Remove(int index)
    {
        T result = this.arr[index];     -> O(1)
        var newArr = new T[this.arr.Length - 1];     -> O(1)
        Array.Copy(this.arr, newArr, index);     -> O(n/2)
        Array.Copy(this.arr, index + 1, newArr, index, this.arr.Length - index - 1);      -> O(n/2)
        this.arr = newArr;     -> O(1)
        return result;     -> O(1)
    }

Problem 5.	RemoveFirst(T) Complexity
Calculate the expected running time O(f(n)) of the RemoveFirst(T) operation. Submit the result in a text file.
SOLUTION: O(n)

    public T RemoveFirst()
    {
        return this.Remove(0);     -> O(n) = running time of: public T Remove(int index)
    }


Problem 6.	RemoveLast(T) Complexity
Calculate the expected running time O(f(n)) of the RemoveLast(T) operation. Submit the result in a text file.
SOLUTION: O(n)

    public T RemoveFirst()
    {
        return this.Remove(0);     -> O(n) = running time of: public T Remove(int index)
    }

	
Problem 7.	Length Complexity
Calculate the expected running time O(f(n)) of the Length operation. Submit the result in a text file.
SOLUTION: O(1) - the length is stored, no need for calculation;

    public int Length
    {
        get
        {
            return this.arr.Length;
        }
    }

Problem 8.	This[index] Complexity
Calculate the expected running time O(f(n)) of the operation this[index]. Submit the result in a text file.
SOLUTION: O(1)

    public T this[int index]
    {
        get
        {
            return this.arr[index];
        }
    }


Problem 9.	First Complexity
Calculate the expected running time O(f(n)) of the First operation. Submit the result in a text file.
SOLUTION: O(1)

    public T First
    {
        get
        {
            return this.arr[0];
        }
    }


Problem 10.	Last Complexity
Calculate the expected running time O(f(n)) of the Last operation. Submit the result in a text file.
SOLUTION: O(1)

    public T Last
    {
        get
        {
            return this.arr[this.arr.Length - 1];
        }
    }